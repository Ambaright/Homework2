---
title: "Programming in Base R"
format: html
editor: visual
---

# Task 1: Basic Vector practice

Suppose we have data from a medical experiment on blood pressure. We have the following pre-treatment values for subjects 1 through 20:

• 120, 151, 125, 126, 115, 132, 132, 129, 134, 139, 127, 122, 127, 135, 133, 128, 147, 138, 140, 132

after treatment, the subjects were measured again (subjects 1 through 20 match)

• 127, 145, 135, 122, 115, 122, 123, 126, 126, 129, 132, 146, 120, 114, 121, 120, 128, 120, 133, 115

1. Create two vectors. One corresponding to the pre measurements and one to the post measurements.

```{r}
pre_measure <- c(120, 151, 125, 126, 115, 132, 132, 129, 134, 139, 127, 122, 127, 135, 133, 128, 147, 138, 140, 132)
post_measure <- c(127, 145, 135, 122, 115, 122, 123, 126, 126, 129, 132, 146, 120, 114, 121, 120, 128, 120, 133, 115)
```

2. Assign names to the vector elements using the paste() function. Note that names() can be overwritten by a character vector. To quickly create the names, try running the code

```{r}
paste("Subject", 1:20, sep = "_")
```

Create the same names for each vector's elements.

```{r}
names(pre_measure) <- paste("Subject", 1:20, sep = "_")
names(post_measure) <- paste("Subject", 1:20, sep = "_")
```


3. Calculate the change in blood pressure for each patient by subtracting post-treatment measurements from pre-treatment measurements. Recall that R does math element-wise! Save this calculation as a new object in R (also a vector)


```{r}
pressure_change <- pre_measure - post_measure
```

4. Calculate the average decrease in blood pressure across all patients. Use the mean() function here!

```{r}
mean(pressure_change)
```

5. Determine which patients experienced a decrease in blood pressure after treatment (a positive change). Use the which() function to just return the indices (and names) associated with this type of change.

```{r}
which(pressure_change > 0)
```

6. Subset the vector of differences to only return those that have a positive change. (Note that you don’t need the which() function here. A Boolean used as an indexing vector returns only indices were a TRUE occurred.)


```{r}
pressure_change[pressure_change > 0]
```

7. Calculate the average decrease in blood pressure for those where the blood pressure decreased (positive change).

```{r}
mean(pressure_change[pressure_change > 0])
```

# Task 2: Basic Data Frame practice

1. Create a data frame object with four columns corresponding to your data above: patient, pre_bp, post_bp, and diff_bp


```{r}
bp_df <- data.frame(patient = paste("Subject", 1:20, sep = "_"), pre_bp = pre_measure, post_bp = post_measure, diff_bp = pressure_change)
```

2. Return only rows of the data frame where the diff_bp column is negative. (Use [ or learn about the subset() function if you’d like. If you use [, don’t reference the original vector from the first part, access the column of the data frame to make your comparison with 0.)

```{r}
subset(bp_df, diff_bp < 0)
```


3. Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120 and FALSE if it is not. Similar to the previous question, don’t reference the original vector from task 1, access the column of the data frame to make your comparison.

Recall you can use $ to access a column. If you reference a column that doesn’t exist and save a vector (of appropriate length in it), that vector becomes a column of your data frame! Use this way of creating the new column.


```{r}
bp_df$post_bp_less_than_120 <- bp_df[, 3] < 120
```

4. Finally, print the data frame out nicely in your final document by modifying the code below appropriately.

```{r}
knitr::kable(bp_df)
```

# Task 3: List practice

Continue the previous example. Suppose we now also have data from another experiment where the ‘treatment’ was actually a placebo.

We have the following pre-treatment values for subjects 1 through 10 (different set of subjects):

• 138, 135, 147, 117, 152, 134, 114, 121, 131, 130

after treatment, the subjects were measured again (subjects 1 through 10 match)

• 105, 136, 123, 130, 134, 143, 135, 139, 120, 124

1. Create a new data frame with this data in it that is similar to the data frame from task 2 (including the new column of TRUE/FALSE values).


```{r}
pre_placebo <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)
post_placebo <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)
diff_placebo <- pre_placebo - post_placebo


placebo_df <- data.frame(patient = paste("Subject", 1:10, sep = "_"),
                         pre_bp = pre_placebo, post_bp = post_placebo,
                         diff_bp = diff_placebo)
placebo_df$post_bp_less_than_120 <- placebo_df[,3] < 120
```

2. Now create and store a list with two elements:

• 1st element named treatment and contains the first data frame you created.

• 2nd element named placebo and contains the second data frame you created.


```{r}
experiment <- list(treatment = bp_df, placebo = placebo_df)
```

3. Access the first list element using three different types of syntax (the result can be a list or just the data frame).

```{r}
experiment[1] #Syntax 1: returns a list with a named element
experiment[[1]] #Syntax 2: returns just the element itself
experiment$treatment #Syntax 3: using $ to get the element
```

4. Use your list from question 2. In one line of code, access the pre_bp column of the placebo data frame.

```{r}
experiment[[2]][2] #Subset by looking at the second element in the list and then the second element in that data frame
```


